// Generated by CoffeeScript 1.12.7
(function() {
  var ArithmeticOps, RelationalOps, test_arithmetic_ops, test_other_ops, test_relational_ops;

  ArithmeticOps = (function() {
    function ArithmeticOps(n1, n2) {
      this.n1 = n1;
      this.n2 = n2;
    }

    ArithmeticOps.prototype.add = function() {
      return this.n1 + this.n2;
    };

    ArithmeticOps.prototype.subtract = function() {
      return this.n1 - this.n2;
    };

    ArithmeticOps.prototype.multiply = function() {
      return this.n1 * this.n2;
    };

    ArithmeticOps.prototype.divide = function() {
      return this.n1 / this.n2;
    };

    ArithmeticOps.prototype.modulo = function() {
      return this.n1 % this.n2;
    };

    return ArithmeticOps;

  })();

  test_arithmetic_ops = function() {
    var n1, n2, ops;
    n1 = 20;
    n2 = 10;
    ops = new ArithmeticOps(n1, n2);
    console.log("add = ", ops.add());
    console.log("subtract = ", ops.subtract());
    console.log("multiply = ", ops.multiply());
    console.log("divide = ", ops.divide());
    return console.log("modulo = ", ops.modulo());
  };

  test_arithmetic_ops();

  RelationalOps = (function() {
    function RelationalOps(n1, n2) {
      this.n1 = n1;
      this.n2 = n2;
    }

    RelationalOps.prototype.gt = function() {
      return this.n1 > this.n2;
    };

    RelationalOps.prototype.ge = function() {
      return this.n1 >= this.n2;
    };

    RelationalOps.prototype.lt = function() {
      return this.n1 < this.n2;
    };

    RelationalOps.prototype.le = function() {
      return this.n1 <= this.n2;
    };

    RelationalOps.prototype.eq = function() {
      return this.n1 === this.n2;
    };

    RelationalOps.prototype.ne = function() {
      return this.n1 !== this.n2;
    };

    return RelationalOps;

  })();

  test_relational_ops = function() {
    var n1, n2, ops;
    n1 = 20;
    n2 = 10;
    ops = new RelationalOps(n1, n2);
    console.log("gt = ", ops.gt());
    console.log("ge = ", ops.ge());
    console.log("lt = ", ops.lt());
    console.log("le = ", ops.le());
    console.log("eq = ", ops.eq());
    return console.log("ne = ", ops.ne());
  };

  test_relational_ops();

  test_other_ops = function() {
    var age, name;
    name = "foo";
    age = 10;
    console.log("name? = ", name != null);
    console.log("age? = ", age != null);
    if (name === "foo" && age === 10) {
      return console.log("admin credentials are correct.");
    } else if (name === "bar" && age === 10) {
      return console.log("user credentials are correct.");
    } else {
      return console.log("credentials are false.");
    }
  };

  test_other_ops();

}).call(this);

//# sourceMappingURL=Operators.js.map
